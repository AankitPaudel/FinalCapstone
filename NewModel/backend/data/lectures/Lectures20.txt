welcome I'm Terry Soule and this is programming chaos a channel devoted to interesting programming projects to help hone your programming skills today's project is a classic procedurally generated fractal trees and as you can see here we're going to set it up so that there's lots of variety in the trees that we can play around with the two important Concepts that we're going to be using are recursion so we're going to generate the trees basically by generating a set of branches and then recursively creating another set and

	another set in another set until we get the whole tree structure that we want and we'll also be using the idea of transformation so we'll draw a branch and then shift our coordinate system to the end of that Branch before we draw the next branch and as you'll see this makes it much simpler to set up the programming okay so with that in mind that we can get started and I'm going to do my trees as a separate class so that if we want to create lots of trees we just create lots of tree objects from

that class so here we go our tree class and so the first thing we need is some basic data members for drawing the tree and in particular I'm going to start with the length of the branches how much the branches get shorter as we go and also the angle between the branches so those are my first three data members that will Define how trees look so the length of each branch the angle that the branch is at and how much we reduce the length by as we go to generate the next branch and then we need a Constructor to set those values

00:01:53	so we're going to start with branches that are length 100 in pixels of course so that's not super long our angles are in radian so 0.3 is a third of a radian that's a pretty decent sized branch and then reduction is 0.8 or 80 so each successive Branch will be 80 percent shorter later I'm going to make these variable and that's how we get the procedural generation of lots of different tree structures but for now we can start with them as constants and so now that we can construct a tree we need to draw it so I'm going to

create our display function and I'll assume that for this project trees don't know where they're located on the screen so instead we pass that in as an argument and this is a design choice you could make the X Y position part of the class and then each tree in a sense knows where it should draw itself or we could do it the way that I am which is the trees don't know where to draw themselves so in a sense we have to tell it this is the location where this particular tree should be drawn so as I said I'm going to be using

transformation so I'm going to begin by transforming my coordinate system to be at the location where I want the tree and then also the default coordinate system has the x-axis pointing to the side and I want to point it vertically because I want the tree to grow up so I'll also do a rotation so translate to the location of the tree and then after you do the translation rotate so that the coordinate system is up and basically that means as I'm drawing branches I'll be drawing them along the x-axis so the first thing I'll

do is draw a trunk and I'll do that by calling a function that doesn't exist so I'll use it and then add the function and there's a couple of reasons for doing it this way but the main one is just if I want to add more complexity to the trunk function that is that draws the trunk by making it a separate function I can add more code without sort of cluttering up my other functions like the display function and for this project I'm going to be doing my trunk and my branches as lines rather than for example rectangles

00:04:16	and so I'm going to use a very heavy stroke width to make a thick line to represent the trunk so I set the stroke weight and I'm setting it to be the length of the trunk times 0.2 so basically 20 percent of the length is going to give me the width and for now I'm going to make all of my branches in Black so I'll just set the stroke color as black and here I'm drawing the trunk itself and this may seem a little odd because it's just a line from 0 0 but remember we've translated so that 0 0 is the

starting point for our tree and then from that point I just have to go the length of the trunk along the x-axis because I've rotated the x-axis to be in the direction I want the trunk to be in so I have a trunk and now I'm going to do the same thing I did with the display function I'm going to translate to the end of the trunk and then ask it to start drawing branches so We Begin by pushing the current transformation onto the stack so that's our push Matrix where again Matrix is the Matrix of Transformations that are

being applied to the coordinate system and then we simply translate to the end of the line I just drew and of course the line I drew went to length comma zero so that's where I translate to and now I can draw my branches and this is like the trunk going to be a separate function the other thing that I need to do at this point is say well the branches should be shorter than the trunk so as I work my way out the tree I want to make things smaller and smaller so I'm going to tell the branches how long they need to be

and that's simply going to be the length times that reduction Factor so if my reduction Factor right now is 0.8 then my first branch is going to be 80 long 0.8 of 100. and then once it's done drawing the branches it'll come out of the recursion and come back and we simply pop the Matrix off and so now I need to Define my branches function and it takes one argument the length of the branches and I need to do the same sort of operation that we did with the display I need to make sure that my branches are

oriented properly and here I've already moved to the right location the end of the trunk now I simply have to rotate and before I do that as always push the current transformation on and then pop it off so there I've rotated the angle I need to set the right stroke weight and I'll stick with the same basic approach it's the length of the branch times 0.2 so the thickness of the branch the thickness of the stroke will be 20 percent of the length of the branch and that's something you can either adjust

yourself or later on we might make it a data member so different trees have sort of different relative thicknesses and then we just draw the line and because we've already transformed to the end of our trunk or the end of our current Branch we're starting again at 0 0 and because we've rotated we're just moving along the x-axis so we're just moving the location l once we've drawn the line we translate to the end of it and draw the next branch now that we've drawn our Branch we translate to the end of it as I said and

then we just ask to draw a new Branch from that location again making it a little shorter by using this reduction of 0.8 and then we can pop our Matrix and we're almost done but not quite so this is our recursive function it draws a branch moves to the end of the branch draws another Branch moves to the end of the branch and so forth the problem is that process will never stop so we need an end condition a stopping condition and that goes at the beginning of the function because we need to check it

first if we don't check it first we'll still get stuck in an infinite Loop and I'll just use a minimum length as the stopping condition so if the length of the branch that I'm trying to draw is for example less than two just return so it'll draw a branch and then another shorter one and another shorter one and it will keep going until the length of the branch it's trying to draw is less than two at that point it returns and stops the recursion we just now need to go into our main code and create a tree

to draw so tree I'll just call it T1 our first tree we have to create a new tree so this is calling the Constructor to set those parameters and then I can come down here and ask that tree to display itself and because of the way I set up the code I have to tell it where to display itself which will be with times 0.5 so the middle of the screen and then height of the screen which of course puts us at the bottom so it'll draw from the bottom of the screen up and here we go let's see so we have an

error let's figure out what we are missing looks like a nested ah yes there we go forgot to close this function so there's the end of the class there's the end of the function and there's our tree okay that does not exactly look like a tree and that's because we only Drew one branch at a time so we have a branch followed by another Branch followed by another branch and because of the angle they're curving off to the side as we go which is fine but doesn't quite look like a tree to get the real tree structure we need two

branches or at least two branches so let's do that it also curves maybe a little more than we want although I think I'm okay with sticking with this for now for our tree in order to get a second Branch all we have to do is come to our branches function copy this code over and rotate in the other direction so now instead of just branches in One Direction I'm going to get branches in both directions that will not just look like a y which might be what you think at first because every time it draws a

branch it draws two more branches at the ends and so we get the full branching structure that we want and here it is so there that is now looking fairly tree-like certainly a little too symmetric but we've got all of the nice branching that we would expect in a tree and notice the code is not that complicated right as long as you understand how the recursion works it's a matter of starting with a trunk because we wanted a trunk and then after that just drawing repeated pairs of branches using recursion from this basic


tree there is a ton that we can do so change the color it's certainly one thing we can put in some Randomness so we get different structures of trees I'd like to put in a little noise so that my trees are not perfectly symmetrical we can put leaves at the end of the branches there's a whole bunch of variety we can do in terms of color of all of those different things to do the one I want to start with is adding a little bit of Randomness to the trees so they're not perfectly symmetrical and I want to do that for two reasons one I

	think it makes the trees look much more realistic it also introduces an interesting issue that we'll need to solve so for Randomness what we need to do is look at where for example the tree branches and add some noise to that branch and also maybe some noise to the length of the branches so here where we're rotating by an angle I want to add some noise and I can do that two ways I could add it as a percentage so times 90 to 110 percent or we could modify it by adding a little bit of random angle so plus or minus a

tenth of a radian for example and I think I'll actually do it multiplicatively so times a random value and that means that I want it to be say between 80 and 120 percent represented of course is decimals so if the angle that I should be rotating is 0.3 a third of a radian now it could be anywhere from 80 percent of 0.3 to 120 percent of 0.3 and to be consistent I should add that factor to both of my branches and so now instead of always being exactly 0.3 there's a little bit of variation and in fact I probably want to

do the same thing here where I change the length of the branch so instead of it always being exactly 80 percent shorter I can put in a little bit of noise here as well and as we'll see this is not actually going to work all that well ah so there's a nice problem that we ran into a good one to show so the error message I'm getting is we cannot push more than 32 times basically I'm trying to do too many recursive calls and the reason that that's come up is my cut off here is the length of the branches get

too short and because of this random Factor sometimes I'm making the branches even potentially a little bit longer and therefore I can recurse further before hitting this cut off there's a couple of fixes to that one is just to make this cut off a little higher so I could instead put in a four and there's a good chance that that would succeed for me but on alternative which I like better is to count the depth of the recursion and stop when I've tried to recurse too far so every time I call branches I

0basically increment how deep I am into the recursion process and then stop if I get too deep and so in terms of the conditional I can do something like this so if I get too deep into the recursion I should also return but of course depth isn't defined yet so that's going to be an argument that I pass in it's just an integer and now I have to pass that into each of the branches and this is the key I don't pass in the depth I pass in the depth plus one and so every time I call the next layer of branches going up in
	the tree I'm one deeper in the recursion and then when I first call the branches from the trunk function I start at a depth of zero so this will have another way of limiting my recursion not just the branches getting too short but also the depth of the tree becoming too deep and there's our tree but it's kind of a mess and the reason it's a mess is I have this draw Loop going over and over again in my main code and every time I display the tree all of that Randomness is being reapplied so it's the same basic tree

but with different levels of Randomness each time and the way we can see that is if I add a background command to erase the tree each time so now each time it's erasing the tree and then it's redrawing it but every time it's redrawn it's with a different set of random values and so you can see I get a lot of Randomness out of my tree but I don't necessarily want that for one particular tree so this is the other issue I was talking about with adding Randomness one is too much recursion the other one is this weird bouncy tree look

	so the way to fix that is to fix the random numbers and what I mean by that is I'm going to set a random number seed for this tree itself so let me do it in code and then it'll start to make sense random number seeds have to be longs so I can't use a float here I actually have to use a long as my type and this is going to be my seed for starting the process of generating random numbers I'll go into my Constructor and set it I could just set it to something like zero always the same seed but what's

more common if I want different trees each time I ask for one is to use something like the current time and I'll do it is the current minute plus the current second so I'm taking whatever the time is and using that as a seed to generate my random numbers and then when I start to display the tree rather than just using any old set of random numbers I'm going to use the random numbers from that particular seed and this is if you've played Minecraft and you can set a seed for what world you generate this is exactly the same

dea that whole Minecraft world sort of grows from whatever random seed you're using we're doing the same thing here it's even maybe a little more appropriate because we're talking about trees so this is the seed for the tree and so now it's still drawing the tree over and over again and each time it's calling the random noise on the branches but the random noise is exactly the same noise because it started from the same seed and so this tree you'll notice comes off to the side a little bit and

comes up a little bit if I run this again I have the same basic structure but clearly different random noise was added to this tree so I get a different structure so all of these trees look fairly similar if I draw one or another one in a sense they look like the same species but with some random variations now what I want is a more fundamental Randomness that in a sense gives me different species of trees and the way that I do that is by going into my Constructor and instead of having these be fixed values I'll make them random

values and as always you may want to play with sort of what this range is but this is going to pick one particular angle and then the rest of the tree will be drawn with that is the basic angle plus some noise on top of it and I can do the same thing for the reduction so I'll give myself a little more range in terms of how much we reduce the size of each branch by and so this looks pretty similar to the last tree so maybe I happen to get the same kind of random values and to see what I mean about the variation I'm

00:19:28	going to make a change here and I'm going to create a new tree on each Loop so each time it's going to redefine that angle and that reduction and if we want to see this reasonably I need to turn the frame rate way down so this is going to draw one frame per second so you can see these structurally look quite a bit different because the base angle and the amount of reduction is changing there is one that had a very significant reduction so it's just a teeny tree there are some that are bigger trees

so this is in a sense giving me almost different species of tree now that we have this working tree program there's a whole bunch that we can do with it um I want to illustrate a few of the options so one thing is to worry about the color because these are just all black trees and again I'm going to do it by setting up some more data members so I'm going to begin to by defining a hue and I want to focus just on Hue so I'll come back over to my main program and set the color mode to Hue saturation brightness and saturation

and brightness I'll generally leave pretty high and focus on the hue so this is going to be the base Hue for my trunk and if I remember my color wheel correctly this will give me colors in the reddish range and to get sort of trunk Browns what you tend to do is a reddish color but without very much brightness and so now when I'm displaying I'm going to in addition to setting the stroke weight I'll set the hue and again using that color but with less brightness and less saturation and that means I want to get rid of this one and

then I will do the same thing for drawing my branches I now okay I could have used maybe a little more saturation but we've got some variety in color the other thing I wanted to illustrate is this is giving us trees that are all the same color I can use this depth variable which tells me how deep I am in the tree to adjust the color and this is a pretty useful trick for getting trees and other procedurally generated structures with a little more character and depth so what I'm going to do is turn up the

brightness for my base tree and I will do that for each branch but then for the branches I'll subtract a little bit based on the depth and I don't just want to subtract the depth I'm in a range of 0 to 255 so I need to subtract a fair amount like 10 times the depth there we go and now you'll notice the trees start a little darker and as they move out to the branches they get a little bit lighter because I have less saturation a little grayer technically and you can adjust this 10 if you want so you could make it more extremeor another good choice would be to add another data member up here so I won't use it but I'll put in an example the Hue reduction and make that a random value that gets set in the Constructor so the important idea there is using this depth variable to control sort of how the tree grows in different ways the next thing that I want to point out is that it's very easy to do things like add leaves so if we want to add leaves to the end of our branches we just have to think about well where does the

branch end well it ends right here when we reach the maximum conditions and so here I could instead of saying return I could say draw a leaf and then I would need a function of course to draw leaves I'm going to do something even a little more interesting than that which is to say either draw a leaf or draw a piece of fruit so there we go so I have a bunch of things that aren't defined yet but that's okay the basic idea is pick a random number from 0 to 100 if that's less than the probability of drawing fruit draw a

piece of fruit otherwise draw a leaf okay so fruit probability is something I'll have to Define and set it in the Constructor probably should do it as a random number but in the interest of time I'll make it 20 so that's the probability of drawing a piece of fruit versus a leaf and I'm going to keep these functions fairly simple so for fruit I'm just going to draw a circle in a different color so for now I'll use a fill of zero which is red on the color wheel because I'm using Hue saturation brightness and then

a circle so my fruit will just be a basic Circle and the one thing I have to be a little bit careful of is when we drew the last Branch as always we translated to the end of it so the end of the branch is going to be my origin I don't necessarily want my fruit overlapping that I want it at the end of the branch so they don't hide part of the branch so I'm going to move out by half the diameter of the fruit there we go 0.5 times let's say my fruit is 20 wide that's in the X Direction so I'm moving

out that far along the branch and then I don't have to move in the y direction at all and in this case I've said I want my fruit to be a circle with a diameter of 20 which is why I moved half that distance and I think that should work in this case I'll fill with more of a green color I think that's about 120. and maybe instead of a circle I'll do an ellipse and so again I'm moving half the length of the ellipse out so that it is right at the end of the branch and if we run this what we get is an error message again

and this is the same cannot use the push Matrix more than 32 times and the reason for that is I'm drawing my fruit and my leaf but after I draw them I'm not returning and so it's actually trying to draw a fruit or a leaf and then trying to continue drawing branches so what I'm missing here because I deleted it is that final return and now we get trees with fruit and leaves and you'll notice that the stroke width around the outside of the leaves is sometimes a little thick because it's whatever was done when we were last

drawing branches so I'll fix that the other thing we can do is make our fruit or our leaves more complicated by adding to the functions which is why I made them separate functions so let's go in and make those changes so the first one is the stroke width which is technically the weight of the stroke and I want that to be one and then I don't want to make the leaves too much more complicated but a very simple change that I like quite a bit is to draw a line down half the middle of the leaf so this
is just drawing a line from the starting point of the leaf there we go down the middle of the leaf and if I run this what you're going to notice is we now have thin outlines no matter what and a little vein down the middle of the leaf it's not much but it adds a bit to the character and it illustrates the idea that we could if we wanted make this Leaf function much more complicated if you want to do like a maple leaf then you do some sort of a polygon shape with lots of Jags along it any place in the code
we have just a number we could potentially replace that number with a data member and get more variety in our trees so in particular I want to change the fill color of the leaves and make that a random Factor Leaf Hue is going to be a new data member and because it's the Hue of the leaf I'll make it a full 360. so my leaves could be any old random color if you want you can limit it to just the green range on the color wheel but what the heck I'll go for science fiction year Dr seussy trees we'll fill that in as the leaf View and
then a trick that works pretty well is for filling in the fruit I'm going to use the complement of the leaf Hue so I'll take the leaf hue and add 180 to it that will give me the color on the other side of the color wheel which is generally sort of complementary and then I need to do a mod 360 because it's a wheel if I go past 360 I want to come back and now I'll get random different Leaf colors but for every leaf color I'll get a fruit that is somewhat complementary to that if you're better than I am with
color and graphic design you can certainly probably do a much better job of picking leaf and fruit cues but it's a not a bad trick to use that is just the Hue we could also go in and pick random saturations and brightnesses there's all sorts of other changes we can make so right now I always have a left branch and a right Branch What If instead of just two branches I want three branches so for example a third branch in the middle which will give me more of an upright trunk with side branches coming off of it well to do
that I just take this part of the code which represents a branch paste it in and say well for this third branch I want the angle to be zero and that will give me sort of a trunk that goes straight up with branches coming off of it and if you sort of get involved in making lots of trees you might find yourself out there looking at real trees always a good idea and you'll see that different species of trees do have sort of fundamentally different structures some have a central trunk with side branches coming off others do what we've
been doing which is lots of dividing patterns so all sorts of variations you can put in it's not uncommon in that process to go from the 10 or so data members that we have here to 20 30 100 different data members that control all sorts of different parts of the tree maybe the number of branches would be another random variable that you put in so as I said a ton of things that we can add to this at this point fairly basic tree structure excellent thank you

