Welcome, my name is Terry Soul and this is Programming Chaos, a channel devoted to fun and interesting programming projects to help you hone your programming skills. In today's video, I'm going to be introducing the concept of classes and objects. And because Halloween is coming up when I'm recording the video, I'm going to do it in the context of procedurally generating a whole variety of pumpkins, with the idea that if you want, you can add some eyes and a mouth to turn them into Jack-o'-lanterns.

To understand classes and objects, and in fact, to understand any programming concept, it's important to understand the problem that it's trying to solve. So when there is a feature added to a language or some new programming concept is developed, it's specifically to solve a particular problem. By understanding the problem, you gain a greater understanding of the solution. So in today's video, I'm actually, in a sense, going to start by programming things the wrong way and then I'm going to introduce classes and objects to fix the problem so that we can program it the right way and thereby see how they get applied. If you're not familiar with it, the environment that I'm programming in is Processing using the Java language, but arguably that doesn't matter much. The idea of classes and objects is common through pretty much all modern programming languages, so the ideas that I'll talk about here apply in pretty much any language you might be using.

To begin with, what I want to do is write a function to draw my pumpkins. Maybe not immediately obvious, but I'm drawing the pumpkins by drawing a little green stem and then three ellipses, and then actually a fourth ellipse in the middle to erase some of these lines. So I just need to create a function to do that and I'm going to pass into that function the XY location where I want the pumpkin drawn. I'm going to use a translate to translate to that location and then draw the pumpkin.

So in Processing, we use a pushMatrix and a popMatrix. That matrix is our current coordinate system and what I'm really doing is translating the coordinate system to this new location and then I can start drawing my pumpkin. The first thing I want to do is draw just the green rectangle for the stem, so I need to pick my color by using a fill command and then draw a rectangle. In terms of the color, this is actually not meant to be red, green, blue, this is Hue, saturation, and brightness. So I need to go to my setup, which is run at the beginning of the code, and change my color mode. This sets the color mode to be Hue, saturation, brightness, where the Hue is 360° like a color wheel, and then saturation and brightness range from 0 to 100. This gives me a green, very saturated but slightly dark rectangle for the stem.

These are just some numbers; it basically shifts it up and a little to the left so it's centered nicely above the pumpkin. Now I can start drawing those ellipses. This draws an ellipse on the left (that's the minus 25), an ellipse on the right (that's the plus 25), and a slightly larger ellipse 50x50 in the center. These are actually going to end up being circles, and then I'll use scaling to scale it to look more like a pumpkin. But this should work okay. All I need to do is call the function and pass in the correct location, so with width being the width of the window (which is created by my size function), so 800 * .5 = 400, that's the middle of the window, and the same thing for the height.

If I run this, there I have a pumpkin-like object. Again, I'm doing it with circles, so I might want to rescale it, which I'll do in a minute. And I haven't drawn the center ellipse to erase some of these lines, which will also make it look a little more pumpkin-like. And because, as I said, Halloween is coming up, I might want to fill in the background in black, but that's a good start for a pumpkin.

So anyway, I'll do the background in black and then I need my next ellipse, sort of sideways in the middle to erase a couple of those lines. I need to make sure that I'm not drawing an outline, so that's a no-stroke command. This ellipse is also drawn at the center, where I've shifted my coordinate system to, and 90 is fairly wide and 30 is not as high, so it erases that bit in the middle. I do want the stroke around the other ellipses, so I'd better remember to fill those in and put the stroke back in here. So my first three ellipses have black outlines, and then my fourth one erases a bit of it, and there we go. Not a bad-looking pumpkin. Again, I'd like to rescale it, maybe to make it a little narrower and a little taller.

I'll do that in a minute, but what I'd really like, as I had on my background, is a whole bunch of these pumpkins sort of filling the screen. So in my draw function, instead of drawing one pumpkin, I'm going to put in some for loops to draw a whole bunch of them. So let's go ahead and do that, and this may look a little odd, but the idea is I want to start a ninth of the height down so that starts a little down the screen, and then I'm going to keep going in a sense till I get to the maximum height. So I can just simplify this and make it just the height, and each time, I'm going to move down a ninth of the height, and so that will give me a nice division between the moving down the screen.

And then I want to do the same thing moving across, and here I'm only dividing by five because I want fewer pumpkins growing across. Let me indent just to make things look nice. And then when I call my draw pumpkin, I'm going to use those XY coordinates. So there we go, there's a whole bunch of pumpkins. I guess the last couple are cut off, but that's okay, I won't worry about it for now. But these are all the same, and what I really want is to procedurally generate them so they're all a little bit different.

As I said, the way that I'm going to do that, at least to begin with (not worrying about the eyes or the mouth yet, just the overall shape and the color), I'm going to use scaling factors to change the size and the X and Y scale, and I'm also going to put a little bit of randomness in the fill color. So let's go ahead and do that. What I want is those variables for the scale first, and I might as well set the values right away. So for the overall scale, I think I want my pumpkins maybe to be a little bit bigger, so random from 1 to 1.7. For the X scale, they're a little too wide, so I want them not as wide, so I'm going to do that 0.5 to 1.0, so they'll tend to be narrower in scale, and I want them a little taller.

So you can play with these numbers if you want, in order to sort of get different scaling factors there. So all I have to do now is, after I do my translation, I can set those scales. So there is an overall scale function, which I just use the scale variable for, and then I can also call the scale function with a separate X and Y value.

Let's see how that looks. Well, there's the problem. I'm getting random pumpkins, but every time I go through the draw loop (because the draw loop loops about 60 times a second), each of those pumpkins is being re-randomized, which is probably not what we want. I'm going to stop it before it gives me a headache. What I want is to generate these random numbers once, and then use them every time I draw that pumpkin.

So one way to do this would be to create an array that has all of my scale values, and then a separate array and fill it in with all of the X scale values, and a separate array for the Y scale values, and a separate array for all of the hues. But now I've got to juggle four arrays, and if I want to draw, for example, pumpkin number one, I've got to remember to go into each array and grab the right values for that pumpkin. That is clumsy because I've got a whole bunch of arrays, and it's prone to errors if I forget to go and grab one of those values, or if I somehow get my values wrong.

So I could be trying to draw pumpkin number seven but forget to update the hue and draw it with the hue of pumpkin number six. So that notion of bunches of separate arrays doesn't really work well. What I would like to do is take all of this data and lump it together in one object, and that's the idea—to be able to say a pumpkin is an object, and each pumpkin object knows its own scale, its own hue.

And so to do that, we create a class, which defines what an object should look like. So let's go ahead and do that now. In Processing, it's nicest to do it by creating a new tab, and I will just call this pumpkin. Then I'm going to create my class pumpkin, and the idea is this defines what data and also what functions go into a pumpkin object.

I know right away that I want it to have these variables, so I can just cut and paste those over. I don't want to randomly generate them here. I'm actually going to randomly generate them as part of the constructor. So a constructor, if you're not familiar with it, is a specialized function that creates new pumpkins. Let me, as long as I'm here, sort of do both at once.

So the way this works is the constructor has the same name as the class, so this is a pumpkin constructor, and the idea of the constructor is it's a special function that gets called when you create a pumpkin object. So when I call the constructor, I don't need to give it a value, it will randomly generate all the values. So this is going to generate scale values, a random hue value, and that's it for right now. I don't need a whole bunch of data members, I'm going to stick with just those.

Now when I want to create a pumpkin, I just create a new pumpkin. And you can see that all of the random data members get set up for me. So I don't have to manually set those for every pumpkin, I just say new pumpkin, and then when I want to draw it, I say pumpkin dot draw.

This is what's great, I can have one function, and that function does all of my work for me. And now I don't need to worry about keeping track of all the arrays. I can just say draw a whole bunch of pumpkins. Let me move that over here. And again, with all these pumpkins, I get the correct value for each one, and it works.







