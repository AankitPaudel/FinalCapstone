Welcome, I'm Terry Soul, and this is Programming Chaos, a channel devoted to fun and interesting programming projects to help you hone your programming skills. Today, I'm going to be talking about an evolutionary version of 3D particle life. As you can see here, we have a 3D model or 3D environment in which we have these little creatures that swim around and collect food. The olive particles they are collecting are the food particles, and the reason they're good at that is because they've been evolving over time.

As I said, this is an evolutionary model. This is not something I programmed in terms of their behaviors. This is something that has evolved. The basics of the model, which I'll talk about in more detail in a little bit, is that they need to collect food in order to get enough energy to reproduce and pass on their genes. If they fail to collect enough food, they starve and die out. That's the basics of the evolution in terms of the model for the creatures. As you can see, there is a collection of particles in this case, and they are held together by forces. It's those forces that evolve over time. We have a variety of creatures, and they all evolved to be able to collect food. As food particles get near, they orient towards them and collect them. It almost looks like they have little mouth parts, but that's more or less a coincidence.

In order to understand this better, we need to take a closer look at exactly how the particle model works. The basic idea for both the two- and three-dimensional versions of particle life is that there are different types of particles, represented by colors. Those particles are either attracted to or repelled by each other. We're also ignoring Newton's third law, which says for every force there is an equal and opposite force, and that's critical to getting the interesting behaviors we see in particle life models. For example, we might have a set of rules that says red particles are attracted to blue particles, and blue particles are repelled by red particles. That gives us a continuous motion of one chasing the other. That wouldn't be the case if we were talking about real physical forces. For example, if you had a spring between them, they would have an equal and opposite attraction. In particle life, we don't worry about that; it's the nice thing about being able to write our own code. We can make up our own laws of physics.

We add a rule that says that very close particles always repel each other so they don’t just clump up into uninteresting blobs. It gives us the kind of behavior we see in our creatures. For example, red particles are attracted to each other, so they cluster a little bit, but they are also attracted to the pink particles, and the pink particles are repelled by the red particles. So we get this interesting movement behavior. If you're interested in programming the non-evolutionary version of either two- or three-dimensional particle life, I've got some videos that walk through the whole programming process, which I will link up above.

In order to better understand how this works, we’ve got to actually look at how the forces change over distance. So here’s the model for that. We have our forces based on the distance. As I said, up close, there’s always a force that repels two particles. So if the blue particle gets too close to the red particle, it definitely gets repelled. We also have a second force, which I’m calling the attractive force, although it could be negative, so it could also be a repelling force. This force applies to every pair of particles, and a particle, for example, the blue particle here, is influenced by the red particle through both of those forces. We really look at the sum of those two forces. If the blue particle gets close, it’s going to feel a negative or repelling force. If it’s at a particular distance away, those forces balance out, and we get an equilibrium point. Then, as the blue particle moves further away in this example, at least, it will start being attracted to the red particle.

So the blue particle on its own will be attracted up until it gets to this point. It will then reach an equilibrium. If it gets closer, it’ll be pushed away. It wants to hover that far away from the red particle in this particular example. The red particle, however, feels a completely different set of forces. It may want to get even closer to the blue particle. So if the red particle gets closer than the equilibrium, the blue particle will start to run away, and then we get that nice motion. The key here is that every pair of particle types feels its own set of forces defined by their own max distance. So we end up with two tables: one for the strength of those forces and the other for the distances associated with the forces. For example, in this case, red particles are attracted to blue because that’s a positive number, but blue particles are repelled by red particles because that’s a negative number. The distance over which those forces apply depends on the values in this second table. That’s the basic idea behind all particle life.

If we want an evolutionary model, things get a little more complicated. We need to define what represents an organism. For my model, an organism consists of 40 particles. We see here are 40 particles that make up one organism. There are two sets of rules. First, there is a set of rules for how these particles interact with each other. Think of those as the self-rules. If we want, we can think of these particles as cells. It’s the forces that hold the cells together, and that’s a table of strengths and another table of distances. Then we have a second set of rules for how these cells or particles interact with the particles of other organisms, including food. In this model, there are five particle types: the first four make up an organism (orange, red, green, and yellow), and the fifth type is the food particle.

These tables are 5x5 tables for the five particle types, and those sets of strengths and distances basically make up an organism’s genome. That defines how the organism holds together and how it interacts with the environment. Additionally, the forces alone are not enough. You need to configure the particles in the right initial locations so that they form whatever pattern is effective. The forces alone can lead to lots of different patterns. It’s like saying, not only do we need the forces that hold your cells together, but we also need to know where your cells are located. The initial positions of the particles are also part of the genome.

To visualize the creatures a little better, they can evolve a single color, which is their base particle color. It’s somewhere on the color wheel, with a value between 0 and 360. Then the other particles are arbitrarily set to be 20° away from that. You’ll notice all of the organisms have fairly similar colors because they’re on a particular slice of the color wheel, but where that slice is depends on the gene for their base color. So, we can think of this as an organism with a genome that consists of defining how its particles interact, how it interacts with the rest of the world, and then simply dropping it into the environment. We let it run around, and if it does a good job of collecting food particles, it gets to reproduce. We make a copy of it, copy its genes over, and there’s a mutation step. The genes get randomly mutated a little bit, and we get a similar but not identical organism. Those organisms compete with each other, trying to get food, and the ones that get the most food get to reproduce and pass their genes on. If they fail to collect food, they starve to death and don’t get to pass their genes on.

That’s the basics of the evolutionary model, and what we see is that it leads to all sorts of interesting and complicated behaviors. Let’s take a look at some of the creatures that can evolve. It’s worth mentioning that the environment these creatures evolve in is basically a three-dimensional toroidal fish tank. It’s three-dimensional, and if they leave one side, they come in on the other side. You’ll occasionally see them disappearing and reappearing as they move around. This is an example of an initial population: 50 completely random creatures before evolution has started. You’ll notice a wide range of behaviors, a lot of which are probably not very effective for collecting food, and a wide range of colors because they all start with a random base color.

You may also notice some creatures that sort of appear to explode and die. I’ve put in a rule that if, within a creature, any two particles get too far apart, both particles die, and the creature loses some energy. So there’s evolutionary pressure to at least somewhat hold together. In contrast, after 10 hours of evolution, all of that diversity has disappeared. That’s because of the competitive exclusion principle. What is a very simple environment, if there’s one type that slightly outperforms another type in terms of collecting food, the competitive exclusion principle says that given enough time, that slightly better type is going to completely dominate the population, and the other type will die out. 

The other thing we see is that they’ve evolved very good avoidance behavior. When they get close to each other, they turn away. This is presumably so they’re more effective at collecting food. There’s no point in trying to collect food when you’re right next to another organism. It’s better to avoid them and find food on your own. You can see they’re pretty good at this, although occasionally they have to do two or three passes to collect food.

Another interesting thing to notice is that the attraction to food for these creatures seems to be guided primarily by the pink particles in front. Those are the particles that are being pulled towards the food, and the rest of the particles follow behind. That’s not the only behavior we observe, however. This is the result of another evolutionary run. If you watch closely, it looks like the red particles in the back are more repulsed by food. That’s what causes the creature to orient itself facing the food.

You’ll also notice that they’ve evolved a much more wobbly structure, not as fixed as the previous run. So different evolutionary runs create completely different outcomes. Here’s one with structured ring shapes. You’ll often see wide shapes like these rings because they’re helpful for collecting food. When it gets close to food, it orients itself quite effectively. There’s a combination that we often see of clumps near the middle, which in a sense are the motive force, and then other particles that are strongly attracted to food.

One of the reasons we get these very well-defined creatures is that, as I said, if they spread out too much, meaning two particles within a creature get too far apart, those particles are deleted from the individual, and they lose some food. So there’s evolutionary pressure for them to stay clumped together in what we would think of as traditional organisms. However, we can remove that rule and let them spread out as much as we want. Let's see what evolves in that case.

Here, I’ve removed the restriction that if two particles are too far apart, they die. All of those individual particles you see scattered everywhere are not food particles. Those are particles of

 creatures that have spread out too far. There are now a few different types of creatures that form in this scenario. Some of them tend to bunch together in rings, others form a sort of flying jellyfish look. The absence of the restriction on distance between particles lets these creatures evolve differently. Some of them still seem to form clumps.