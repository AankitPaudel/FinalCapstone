welcome my name is Terry Sol and this is programming chaos a web Channel devoted to interesting programming projects to help you practice your programming skills for today's project I'm going to be programming lindenmeyer systems or L systems to generate organic I.E plant tree-like structures in both two and three dimensions so in a previous video I should have a link here I've talked about using l-systems to generate fractal patterns that are less organic looking and that's one of the common uses for L systems

another one is for generating these sort of organic plant-like structures and that's what I want to focus on in this video so before we start the code we sort of have to understand a little bit about the basics of lindenmeyer systems so I'm going to go over that quickly the general idea of an L system or a lindenmeyer system is that it's a series of rewrite rules based on a grammar and by rewrite rules I mean we have something to start with what's typically a start symbol like s and then a rule to

rewrite that so in this case I'm going to say my start symbol becomes a sort of a stick with a ball on the end and that then we have another rewrite rule that says something like well every time you see a ball rewrite it it as a V with new balls on the end and so this ball becomes a V and I'm just using these circles here as placeholders to sort of keep track of what should be going on we might have another rewrite rule that says every time you see a line replace it with a longer line or maybe with two

line and then we simply continue to apply those rewrite rules so each of these circles here and here becomes their own V and each of these lines becomes a longer line and so forth and you can see from the simple example we start to get a tree-like structure or at least a branching structure so in order to program this we need to formalize the idea a little bit by writing what's known as a grammar and so the grammar defines these rewrite rules so as above we have a start symbol and then in this case I'm going to say a start symbol

becomes a forward and a branch which roughly corresponds to this line is a forward operation and this circle represents where we would plug in a branch it's sort of a placeholder and then our next rule is well if you see a b that should become a left Branch a left a forward and another Branch so you can see we've sort of turned to the left moved forward and added a branch and the same thing but on the right and then we have another rule if you see an F so here replace it with two F's which is where our Short Line becomes twice as

long so what we're doing is creating a grammar or a series of rewrite rules that tell us how to expand a string so we start with a very short string s and expand it like this s becomes FB using this first rule the F becomes two F's using my third rule here the B becomes a left branch and a right Branch using this rule right so that gives us the left and the right parts so that gives us a new string and then we take this string and we expand it just by applying the same rules again so each of these two F's that we have

here double so now we have four forwards and in a sense that's the trunk of our tree getting longer this L and this left bracket remain unchanged so if I don't have a rule for anything I'm just going to keep the character the same this F based on rule 3 becomes two F's this B becomes a whole nother branching structure so a left and a right and then the same thing this right is conserved this forward is doubled this Branch becomes two branches and we could then take all of these rules and use them to expand this string again

and again and again our structure keeps getting more and more complicated the nice thing about L systems is the whole structure is defined by in a sense a fairly simple set of rules so by modifying these a little bit you can get very different structures now in terms of the programming there's basically two pieces that are important one is we need the rewrite rules that expand our string so a function that takes a string and expands it and then another function that can look at a string like this one

here and follow the instructions so it sort of says go forward go forward go forward go forward turn left go forward a couple of times turn left go forward B maybe doesn't draw anything so some of these symbols may not draw anything but that's used to expand the string further and then we'd have it turn right and so forth when we do the programming which I'll start in just a second there's basically two functions that we need an expand function and a draw function so with that in mind let's tackle the code
piece so I'm going to be doing my programming in processing which is available from processing.org if you want to download it and follow along what I have here is sort of the processing boiler plate to set up and draw images although of course this doesn't do anything except create a drawing window in terms of creating the plants I'm going to do this as a separate class because if we're going to be able to draw one tree I want to be able to draw a whole Forest so there's my new tab for the class

plant the first thing we are going to need is to Define one of our plants is the string that we expand and so I'll just need is a data member a string and looking ahead a little bit I'm going to use S as my start symbol so I can say my string starts with the symbol S and now I need my expand function that will take that string and apply our grammatical rules to expand it so I want to take my string and expand it into a new string so I need a new string and that new string will start as an empty string and in order to do the

expansion I need to look at every character in s so I'm just going to do a for Loop to walk over each character in my initial string Str and then for each character I'm going to use a switch statement to look at the character and decide what should be expanded in the new string so my first case is my start symbol S as we saw in the grammar rules earlier I'm just going to have an S become an FB a forward branch so there's the basic idea I just because I saw an S I add on to my new string FB for forward and branch and now we can

just do the rest of the cases here we go so an F becomes two F's in the new string and a branch becomes a left branch and a right branch and the idea which I mentioned before is the lowercase L basically is going to say turn to the left a lowercase R says turn to the right the square brackets are to keep the branches separate and I'll have to talk of in a minute when we do the draw how they are used in the drawing part the one other thing we need in our expansion rules is for any other character like a left or a bracket we

want to keep it unchanged so that becomes our default case there we go so for any character that isn't an S an F or a B that is the default case we simply take whatever character it was and add it on to the new string that ends our switch statement we can end our for Loop and then the last thing we need to do is take this new string and make it the class string Str is equal to that new string there we go that's our expand function that takes a string applies the grammatical rule and expands them and hopefully it's

pretty easy to see if we want to make a different kind of our plant structure we can just go in and change these cases so they match whatever grammar rules you want to have so that's the expand the other thing we need is a function that can given this string Str figure out how to draw it so that's going to be our lay function we want to look at each character in the string and based on the character decide what action to take in terms of drawing so this is the basic structure we use again a for Loop to walk through if you

will every character in the string and then we use a switch looking at that particular character to decide what to do and the first one I'll look at is f which is just forward so for forward all I need to do is draw a line from the current location forward whatever amount I want to move and I'm going to make that a variable which we can Define later so I'm just drawing a line Straight Ahead which is to say in the X Direction so I'm going to use and we'll see this when we get down to the lefts and the rights I'm going to use

transformation so that the x-axis is always the direction that I want to move along and similarly I'm going to keep moving my coordinate system so that 0 0 is the current location I'm drawing from and moving the coordinate system of course is fairly simple we simply translate to the end of the line so I draw a line that's this long and then I translate to the end of it and now my new coordinate system is at the end of that line and whatever I do next starts at 0 0 so I'm going to sense all of my drawing is from 0 0.

and then to maybe make this make a little more sense now we can do the case of an L well if I see an L my coordinate system is at the end of the current Branch all I have to do is rotate to the left by some angle and again I'll Define that angle as one of the data members of the class and then the same thing for right so we rotate right the other direction so let's go ahead as long as I'm here put in those data members so I want I'll make it a float the length of each section and oddly enough I'm going to

make that length quite short and the reason why it's quite short is we have in our rules an F becoming 2f so we're going to keep growing longer and longer so I want the base length to be fairly short so this will interestingly not only draw our plants for us but it'll show them growing and then for an angle I'll just use a fraction of Pi right Pi is 90 degrees that would be a huge angle for a plant so I'm going to do a fraction of Pi and these are things of course that you can play with so that

takes care of the left and the right and the forward the other cases that we need to worry about is an S well s is just the start symbol we don't have to draw an s b b is just a placeholder for where we put in a branch we don't actually have to worry about drawing anything for a branch branches are automatically drawn by our rewrite rule here that handles the left and the right the thing we do have to worry about a little bit are the left and right brackets and the way to think about that is when

I do a branch I want to turn left go forward and then maybe do some more drawing and then when I'm done with that drawing I want to come back to the starting point so I can turn right and go the other way well the way to remember that starting point is to take our current transformation matrix and save it by pushing it onto a stack and really that is a command that gets used quite a bit if you're doing Transformations which is just our normal push Matrix so what this says is if I see a left bracket I'm going to go start drawing a

branch I better remember where I started by pushing the current transformation matrix onto a stack and then the symmetrical version of that is if I see a right bracket that means I'm done drawing the branch and I want to come back and the way I come back is by popping off the last Matrix that I was dealing with so this effectively says I've drawn that Branch pop off those transformations to go back to the last one I remembered with my push Matrix and now I can end my switch statements and end my for

statement and I already have my display function finished so there we go this is actually all we need to draw at least a simple branching plant structure using an L system and to make it work we have to come over here and actually create a plan I'll ask it to display itself and then I want it to grow but I don't want it to grow too much and so I'm going to call the expand function but only a certain number of times as long as the frame count is less than eight I'm going to ask my plant to expand itself so it should only expand

itself a total of seven times that may or may not be enough but it'll give us a good place to start in order to watch this happen a little better I'm going to lower the frame rate so we'll just see one expansion every frame and then the last thing I have to do because all of my plants are drawn from 0 0 if I were just to start drawing them here they'd show up in the upper left hand corner drawn sideways so I need to rotate and shift my axes so that they get drawn from the bottom of the screen here we go so I'm gonna as always store

the current transformation with the push Matrix translate to width times 0.5 so the middle of my window and height minus 10 so a little above the bottom of the window and then I'm going to rotate by minus 0.5 Pi so my x-axis will be rotated so it's facing up and that means my plant will be drawn facing up and then I can display this and then I can pop that Matrix back off let's see what this looks like so there we go we can see the plant growing each time it gets bigger because each forward is replaced by two forwards
so we had a very teeny plant down at the bottom and it grows bigger and bigger I didn't put a background in and so you see all of the old iterations of the plant as it goes probably could have gone a little higher here so let me stop this and make a couple of those changes I'll have it draw in the background each time we can try two more steps so a little teeny plant and it grows oh yep one time too many so this is the basics and you can see from this we have a nice branching growing plant-like structure it's too

uniform to really look like a plant so we should probably put in some randomness and potentially the stem part sort of the trunks are growing faster than we'd like so we might want to change that as well so the first thing I want is for each section not to grow quite as rapidly one way to do that which I like is just to make this probabilistic and I'll show you what I mean so half the time when we have a forward will replace it with two forwards and the other half the time we won't so it won't grow quite as much and if we run

this so our plant starts down here very small and you can see it's growing but not quite as rapidly some of our branches end up quite short because we don't get very many Replacements in them and this gives us a more natural sort of organic looking plant it also means that I can grow for more iterations so we can come back over here now and set this to say 12. and then we can do the same sort of thing with our branching in order to get a more natural look and I'll do that by changing it so that sometimes we do two left and

sometimes a little more to the right and I'll use the same idea of having that occur randomly there we go so now 50 of the time the branch will be a little stronger to the left and the other 50 percent of the time a little stronger to the right there we go and so you can see not so symmetric anymore it's maybe curving around a little more than I would like so if that happens we can go back up here and maybe reduce this angle a bit and as I said it can take a fair amount of tweaking to get the forms that you're

happy with there we go that's not looking too bad and I think that I'll turn off the frame rate so this runs a little quicker we won't get to see it grow as much but things happen a lot faster now okay so we have something that has the right plant-like structure but it doesn't necessarily look like a plant in the sense of having say a thicker trunk or any colors so the next thing I'm going to do is add some controls for width of the branches and for the colors and the way I'm going to do that is by changing

my rewrite rules my grammar to include some extra instructions and the basic idea is if you think about how a tree or most plants work the main trunk stays a pretty consistent diameter until it branches and then the two branches get smaller and then it stays a pretty consistent diameter and then when it branches again the branches get smaller this isn't a hundred percent accurate but it's fairly accurate and so I'm going to go into my rewrite rules and say well when I do a branch I want to change the dimensions from there some of

the drawing commands and so I'm going to put in a u thinking of up and you can use whatever character you want and when I finished drawing that branch and come back down I want to undo that command so I'll put a d for sort of down as just a way to remember this and you and a D so now whenever I do branches I also know I can use this character to say things like make the next Branch narrower make it a different color and when I'm done drawing it I can say undo that command we could tie it to the left

and the right bracket itself but I like having an extra character instead because it gives us a little more control so we now are going to have U's and D's in our string and so we have to add them to our draw rules so case U maybe a comment to remind myself this is going up the branch and what I want to do is make the branch narrower and change the color but I don't have those variables yet so before I can actually put anything in here I need to go up and Define some variables to modify so the first variable is my stroke

weight I'm doing this as line so I'm going to make the line thicker in the main trunk with a stroke weight and then I will modify that stroke weight and in terms of the color I'm going to use a hue saturation and brightness so that's going to be the brightness and I'll start at a low value so I have a dark trunk and it gets brighter towards the leaves and I'll start with a hue of zero which oddly enough will be in red but it'll be sort of a dark red which gives us a brownish which is not terrible for the

trunk as always these are things you can modify and so now that I have these I'm going to use them when I draw the line the stroke weight for Drawing the Line and use my Hue and brightness for the color of the line and for now I'll leave the saturation as a hundred if you want you can add another variable to change saturation so this alone will make all the lines look the same but what I want to do is say when I get to a u and I start drawing a branch I'm going to change those so for example when I Branch off to the

left or the right do I make the weight a little smaller I'm going to crank up the brightness a little bit and for the Hue I'm going to add 10 to the Hue so I'm working through my color wheel the color wheel only goes around 360 so I want to do a mod 360 if I go past the end I'll come back to the beginning and then the same thing for when we in a sense finish a branch and come back down basically I want to undo all of the things I just did I want to go back to the old values so I'll just reverse

these calculations so these are simple just multiply by the inverse the Hue is a little more complicated because I'm subtracting 10 I have to worry about going below zero so I'm going to add 360 and because I'm adding 360 I have to worry about going past the end so I'll do a modulus 360. and then break and let's see how this looks one too many parentheses there we go so there's our tree you can see it growing nicely and branching and it starts with a think thick trunk but at each branch point it gets thinner and

thinner and thinner and the Hue changes and the brightness changes except that doesn't actually happen because I never change the color mode we'll get to that but the color does change and the thickness changes and we get a much more realistic looking form as I said none of this matches what I described earlier we're not starting with a dark red because I did forget to change the color mode so let's go do that there we go so Hue which is a color wheel of 360 and then saturation and brightness I always think of those as

zero to a hundred and so there we start as I promised with sort of a dark red brownish looking trunk and it branches out into green if you like the other colors better fine go for it right that part is up to you and every time we run this we're going to get a different looking tree because of the randomness in there but the same basic structure the next thing I want to do is turn this from a two-dimensional tree into a three-dimensional tree and so we need to change from a two-dimensional window into

three-dimensional window turns out that's pretty easy in processing we just say I'm on a 3D window p3d is all that it takes and now when I draw this it looks exactly the same and the reason it looks exactly the same is because I'm still drawing a 2d shape I'm not taking advantage of the third dimension in order to see a sort of taking advantage of the third dimension what I want to do is start rotating this so we're going to rotate it so we can see it from all sides here I've translated to the bottom

of the screen and I've rotated my x-axis so that it is pointing up and now what I want to do is have the plant rotate around and that's going to be a rotation oddly enough around the x-axis so we know that we're in three dimensions we got to think about this a little harder X starts by going across y comes down and Z although we haven't worried about it before comes out of or into the screen so this rotation here because we didn't give it a direction is automatically around Z so I'm taking my X Y axis X

over and Y down and rotating them so X is now up if I want to rotate my tree I'm rotating it notice around the x-axis and so we do that just by putting in a command that specifically says rotate around X by default this rotation is going to be around the z-axis how much I rotate I'm going to again use the frame count to determine how much I rotate by so I'm going to rotate by a very small fraction of Pi based on the frame count so there we go there's our tree kind of in three dimensions of course as I said

when we drew it we only drew it in two Dimensions so it's still a flat tree but now we can see it rotating around in three dimensions so what we need to do now is change the tree itself so that it's in three dimensions so how do we do that well the approach is when we Branch we don't just want to Branch off to the left we also want to rotate around that direction so our next branches get rotated and that sounds complicated but it actually is pretty simple it just means when I rotate to get a left Branch I also want to rotate

around the x-axis and I'll do another angle I'll call it angle X for those rotations same thing down here when I turn when I Branch out to the right and it turns out these can both be positive because the left is going off to the left and the right is going off to the right and so rotating by the same amount works fine and then I just need to come up here and put in that angle I guess I will make it a data member for the whole class and I'm going to make that a bigger angle because I want to rotate quite a

bit to get my branches to stick out and I'm making this a data member for the class so that if I create other plant objects I could potentially go in and change those data members these are not data members of the class because they're continually changing right I keep updating what the weight and the brightness and the Hue is and so I don't want to make those parts of the class what I might want to make part of the class I'm not going to I'll leave it to you if you want to play with it is these

adjustments so how much the weight changes how much thinner the branches get or how much the brightness changes or how much the Hue changes those would be good things to make part of the class because then every individual plant object could vary by how much these values change it wouldn't be bad to have for example a starting Hue so not the Hue itself which keeps changing but the starting Hue could be a member of the class in fact let me put that in just to show you what I mean and now when I create more plant objects

I could change this variable so each plant object starts with a different Hue what we're really interested in is looking how this angle X works so let me put that in and there we go there's our tree and now it's a nice three-dimensional tree because every time we got a branch we rotate before we draw the next branch and if I run this again we get a slightly different looking tree because of the randomness in terms of the left and right branches so this is a starting point it gives lots of different options for things to play

with it's easy enough if you want a whole Forest just to create some more plant objects and display those if you want when you create the new plant objects you can go in and do things like change the starting Hue change the angles they use so not only do you have a bunch of plants but you can give each one its own characteristics one other thing I want to mention is the way that I got the variety out of this was by going in here and putting in some Randomness in how the rules are applied as I mentioned you could get a similar

effect by putting some Randomness in here when you rotate your branches both of those work the downside to putting the randomness here is then it is not controlled by the grammar by putting the randomness and the grammar it's the grammar that controls the structure it's very easy once we have this basic grammar to expand upon it if you want say a central trunk you would simply add another option in here something like just go forward with no left or right turns and then we'd have a central trunk

if you want other extra cases so you have a place where there's a branch but I don't know you want to put cool things in like knot holes or something you just add another character that gets added in along the way so I said this at the beginning and I'll repeat it the nice thing about L systems is you can Define what your structures look like just by changing the grammar if you search online under L system plans you'll see all sorts of different grammatical rules that give you different plant structures or even more

fun at least from my perspective is just make up some of your own and in particular if you come up with any really cool looking structures please mention the grammars you can paste the whole grammar rules in into the comments below and the rest of the US can try them out and then one other thing is here I focused on plant-like structures and so I've got angles that are good for drawing plants but you can do things like use 90 degree turns and get weird antenna more artificial type looking structures and those can be extremely

cool as well so don't think you have to be limited just to plants so lots of different structures that you can build using l-systems play around with them if you get anything cool let us know thanks

